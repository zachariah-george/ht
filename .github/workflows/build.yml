name: Build Apache HTTPD

on:
  push:
    paths:
      - '**.yml'

jobs:
  build:
    runs-on: windows-latest
    
    steps:

    - name: Set up MSVC
      uses: ilammy/msvc-dev-cmd@v1

    - name: Set up NASM
      uses: ilammy/setup-nasm@v1.4.0

    - name: Set up jq
      run: |
        choco install jq

    - name: Get 'latest' tag from openssl/openssl repo
      id: latest_tag
      run: |
        latest_tag=$(curl -s "https://api.github.com/repos/openssl/openssl/releases/latest" | jq -r .tag_name)
        echo "::set-output name=latest_tag::$latest_tag"
      shell: bash
      
    - name: Get 'latest' tag from zachariah-george/openssl repo
      id: latest_tag_unofficial
      run: |
        latest_tag=$(curl -s "https://api.github.com/repos/zachariah-george/openssl/releases/latest" | jq -r .tag_name)
        echo "::set-output name=latest_tag::$latest_tag_unofficial"
      shell: bash

    - if: steps.latest_tag.outputs.latest_tag_unofficial != steps.latest_tag.outputs.latest_tag
      name: Check Tags
      run: echo "Unofficial tag is different from official tag."

    - if: steps.latest_tag.outputs.latest_tag_unofficial != steps.latest_tag.outputs.latest_tag
      uses: actions/checkout@v2
      with:
        repository: openssl/openssl
        ref: ${{ steps.latest_tag.outputs.latest_tag }}

    - if: steps.latest_tag.outputs.latest_tag_unofficial != steps.latest_tag.outputs.latest_tag
      name: Configure OpenSSL
      run: |
        perl Configure VC-WIN64A --prefix=C:\openssl

    - if: steps.latest_tag.outputs.latest_tag_unofficial != steps.latest_tag.outputs.latest_tag
      name: Build OpenSSL
      run: |
        nmake
        nmake test
        nmake install

    - if: steps.latest_tag.outputs.latest_tag_unofficial != steps.latest_tag.outputs.latest_tag
      name: Compress OpenSSL
      run: |
        Compress-Archive -Path C:\openssl -DestinationPath openssl.zip

    - if: steps.latest_tag.outputs.latest_tag_unofficial != steps.latest_tag.outputs.latest_tag
      name: Get the date
      id: date
      run: echo "::set-output name=date::$(date -u +'%Y%m%d%H%M%S')"
    
    - if: steps.latest_tag.outputs.latest_tag_unofficial != steps.latest_tag.outputs.latest_tag
      name: Set release name
      id: set_release_name
      run: |
        latest_version="${{ steps.latest_tag.outputs.latest_tag }}"
        datetime=$(date +"%Y%m%d%H%M%S")
        version_with_datetime="$latest_version-$datetime"
        echo "::set-output name=release_name::$latest_version"
      shell: bash

    - if: steps.latest_tag.outputs.latest_tag_unofficial != steps.latest_tag.outputs.latest_tag
      name: Remove 'latest' tag from existing release
      id: remove_latest_tag
      run: |
        # Get the existing release ID by tag name
        release_id=$(curl -s "https://api.github.com/repos/zachariah-george/openssl/releases/tags/latest" | jq -r .id)
    
        if [ -n "$release_id" ]; then
          # Remove the 'latest' tag by editing the release
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"tag_name": "removed_latest"}' \
            "https://api.github.com/repos/zachariah-george/openssl/releases/$release_id"
        else
          echo "Release not found for 'latest' tag."
        fi
      shell: bash

    - if: steps.latest_tag.outputs.latest_tag_unofficial != steps.latest_tag.outputs.latest_tag
      name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: 'latest'
        release_name: ${{ steps.set_release_name.outputs.release_name }}
        draft: false
        prerelease: false
    
    - if: steps.latest_tag.outputs.latest_tag_unofficial != steps.latest_tag.outputs.latest_tag
      name: Upload release asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./openssl.zip
        asset_name: openssl.zip
        asset_content_type: application/zip

name: Build if update is available
on:
  push:
    paths:
      - '**.yml'
  schedule:
    - cron: '*/60 * * * *'

jobs:
  build:
    runs-on: windows-latest
    
    steps:

    - name: Set up MSVC
      uses: ilammy/msvc-dev-cmd@v1

    - name: Set up NASM
      uses: ilammy/setup-nasm@v1

    - name: Get 'latest' tag from openssl/openssl repo
      id: latest_tag
      run: |
        $url = "https://api.github.com/repos/openssl/openssl/releases/latest"
        $response = Invoke-RestMethod -Uri $url -Method Get
        $latest_tag = $response.tag_name
        Write-Host $latest_tag
        Write-Host "official_tag=$latest_tag" >> $env:GITHUB_ENV
        echo "official_tag=$latest_tag" >> $env:GITHUB_ENV
      shell: powershell

    - name: Get 'latest' tag from zachariah-george/openssl repo
      id: latest_tag_unofficial
      run: |
        $url = "https://api.github.com/repos/zachariah-george/openssl/releases/latest"
        $response = Invoke-RestMethod -Uri $url -Method Get
        $latest_tag_unofficial = $response.tag_name
        Write-Host $latest_tag_unofficial
        Write-Host "repo_tag=$latest_tag_unofficial" >> $env:GITHUB_ENV
        echo "repo_tag=$latest_tag_unofficial" >> $env:GITHUB_ENV
      shell: powershell

    - name: Generate Release Notes
      id: generate_release_notes
      run: |
        # Compare changes between the official and custom repositories
        changes=$(git log --pretty=format:"%h %s (%an)" ${{ env.official_tag }}..HEAD)
        
        # Create a release notes file
        echo "Release Notes" > release_notes.txt
        echo "=================" >> release_notes.txt
        echo "" >> release_notes.txt
        echo "$changes" >> release_notes.txt
    
        # Set the release notes as an environment variable
        echo "::set-env name=RELEASE_NOTES::$(cat release_notes.txt)"
      shell: bash

    # - name: Compare tags
    #   id: compare_tags
    #   run: |
    #     echo "unofficial=$repo_tag"
    #     echo "official=$official_tag"
    #   shell: bash
      
    - if: env.repo_tag != env.official_tag
      name: Check Tags
      run: echo "This repo is behind official."

    - if: env.repo_tag != env.official_tag
      uses: actions/checkout@v4
      with:
        repository: openssl/openssl
        ref: ${{ env.official_tag }}

    - if: env.repo_tag != env.official_tag
      name: Configure OpenSSL
      run: |
        perl Configure VC-WIN64A --prefix=C:\openssl

    - if: env.repo_tag != env.official_tag
      name: Build OpenSSL
      run: |
        nmake
        nmake test
        nmake install

    - if: env.repo_tag != env.official_tag
      name: Compress OpenSSL
      run: |
        Compress-Archive -Path C:\openssl -DestinationPath openssl.zip
    
    - if: env.repo_tag != env.official_tag
      name: Set release name
      id: set_release_name
      run: |
        latest_version="${{ env.official_tag }}"
        datetime=$(date +"%Y%m%d%H%M%S")
        version_with_datetime="$latest_version-$datetime"
        echo "::set-output name=release_name::$latest_version"
      shell: bash
      
    - if: env.repo_tag != env.official_tag
      name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: '${{ env.official_tag }}'
        release_name: ${{ env.official_tag }}
        draft: false
        prerelease: false
    
    - if: env.repo_tag != env.official_tag
      name: Upload release asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./openssl.zip
        asset_name: openssl.zip
        asset_content_type: application/zip
